########
# 2018.03.20 LunchR - Third session: Tips and tricks in R
########

#-- Clear the workspace
rm(list=ls(all=TRUE))


#-- Read in libraries:
# install.packages("tidyverse")
# install.packages("RCurl")
# install.packages("dplyr")
# install.packages("tidyr)
# install.packages("ggplot2")


#library(tidyverse)
library(dplyr)
library(tidyr)
library(ggplot2)
library(RCurl) # Install this to read in data directly from github

#-- Read in data
# This is a dataset on time series of back-calculated growth on perch in the heated biotest lake and the surrounding reference area
# Either drag to desktop or load library and read from GitHub:

#-- Read in data from GitHub repository
dat_raw_wide <- read.csv(text=getURL("https://raw.githubusercontent.com/maxlindmark/LunchR_3/master/perch_FM_BT_70_04_wide.csv"))

#-- Alternatively, you can download it from the google drive and then either set your working directory to the data-location, or putting the full path to the file. But remember, that means every user needs to tweak your code before running the script! Anyhow, it looks like this on my computer:

#setwd("//storage-og.slu.se//home$//mxli0002//Desktop")
# or
#data <- read.csv("//storage-og.slu.se//home$//mxli0002//Desktop//data_name.csv", header=T, sep=";")


#-- Inspect data. This is ALOT bigger than the IRIS data, so type "dat_raw_wide" at your own risk! Instead, we use str() and head()

str(dat_raw_wide)

# Ehhh.. pretty classic messy ecological data... 


#-- Let's do some initial renaming and save in it in clean data
dat_clean_w <- dat_raw_wide %>% 
                            rename(year_catch = F.e5.ngst.e5.r,
                                   year_birth = F.f6.delse.e5.r,
                                   age = X.c5.lder)

str(dat_clean_w)
names(dat_clean_w)

#-- Slightly cleaner but we have a problem:
# X1, X2... X9 are ages. So that's not tidy data
# This means we cannot use the strength of ggplot to get an overview of the data, and if we want to do stats on the data later it's also preferred to have tidy data.
# We would much rather prefer to have a column for age and length, so that 1 row = observation. Luckily there is a super neat function in tidyr (part of the tidyverse) called "gather". See lecture notes for details, but in principal, what we do is:

# 1. Give the new column names you want to create, e.g. "reading_no" (which is back-calculated length at age if it's a year ring) and "length". 

# 2. Then you specify which columns are moved and shuffled in these columns. These will be the current columns for unique ages. So check the str() and the column number using names() of the data again 

# We will move columns 8:16 = the ones starting at x1 to x9
 
# Let's try it out! We use the pipe operator again, %<%

dat <- dat_clean_w %>%
                   gather(reading_no, length, 8:16, na.rm = T)

head(dat) # Now the data is in a long, tidy format. 

# There's also an opposite to the gather function called spread (from long (tidy) to wide):
head(dat %>% spread(reading_no, length))
                

# It made the data long, but did it work? A very simple test is to select an individual and see that they have the same data in both the wide and tidy dataframes
subset(dat, ID == "2004573")         # Long, Tidy data   
subset(dat_clean_w, ID == "2004573") # Wide data              

# In the last session we talked about using data visualization to check if data manipulations are correct. We can try this here. But we don't know is this is true for all individuals. So we can plot all length at age 1 for instance


plot(dat_clean_w[,8] ~ dat_clean_w$year_birth, pch=16, cex=1.2)  # this is how to plot age reading 1, wide data format

points(length ~ year_birth, col="red", cex=1.2,           
       data=subset(dat, reading_no=="X1"))                      # this is how to plot age reading 1, tidy data format (overlap)

# The transformation worked as we wanted for all individuals

#-- Plotting length at age

ggplot(dat, aes(age, length)) +
       geom_point() + 
       facet_wrap(~year_catch)

# Not a very informative plot, because age is age at catch, not age corresponding to lengths


# Can we filter out the maximum length in each ID, corresponding to length at age at catch? Yes! Use group_by in a pipe and the apply filter to each group!

dat %>% 
    group_by(ID) %>%                              # ID = 1 indiviudal 
    filter(length == max(length)) %>%             # Maximum length of that individual, length at age at catch 
           ggplot(., aes(factor(age), length)) +  # Plot age vs length
           geom_point() +                         # Use points
           facet_wrap(~year_catch)                # Subplot for each year of sampling

# But, the cool thing about these data is that they contain back-calculated length at age, so why don't we look into that instead of just length at catch!

str(dat)

# But "reading_no" is not numeric but a character. There's most likely a much nice way to do this, but we'll use some if else commands.

# Create a new empty column for numeric "reading"

# Mutate example ####

dat <- dat %>% 
           mutate(reading_no_num= ifelse(reading_no=="X1", 1,
                                  ifelse(reading_no=="X2", 2,
                                  ifelse(reading_no=="X3", 3,
                                  ifelse(reading_no=="X4", 4,
                                  ifelse(reading_no=="X5", 5,
                                  ifelse(reading_no=="X6", 6,
                                  ifelse(reading_no=="X7", 7,
                                  ifelse(reading_no=="X8", 8,
                                  ifelse(reading_no=="X9", 9, NA)))))))))) 



## Looks correct!
ggplot(dat, aes(reading_no, factor(reading_no_num))) + geom_point()
#

# Lets have an overview of the whole dataset:

dat %>%
    ggplot(., aes(year_catch, length)) + 
    geom_point() + 
    facet_grid(reading_no_num ~ Lokal)

# This plot is nice for an overview, i.e. to see all data, but less good for identifying time trends! That's really easy, we can just switch the faceting variable with the x-variable! Note we can use facet grid to produce a matrix of plots (but then we can't set free axis scales!)


# We can do the same with boxplots, and set y-axis to freely vary within each group

dat %>% 
    ggplot(., aes(year_catch, length, group = year_catch)) +  
    geom_boxplot() + 
    facet_wrap(reading_no_num ~ Lokal, scales = "free_y", ncol=4)


# Let's look at specific ages in more detail and how they've changed over time:

dat %>% 
    filter(reading_no_num == 3) %>%  # Only 3 year olds
           ggplot(., aes(year_catch, length, colour = Lokal)) +
           geom_point(alpha=0.2, size=2.5, position = position_jitter(w = 0.2, h = 0)) + 
           theme_bw()


# So there's a difference over time, but because of the large amount of data, we overplot a lot even with jitter and alpha. We can look at two contrasting years, e.g. 1980 and 2002, and compare length at age curves, not including the oldest fish:

dat %>% 
    filter(year_catch %in% c(1980, 2002) & reading_no_num < 7) %>%
           ggplot(., aes(factor(reading_no_num), length, colour = Lokal)) +
           geom_boxplot(size=1.2) + 
           geom_jitter(alpha=0.4, aes(reading_no_num, length, colour = Lokal),size=2, position = position_jitter(w = 0.2, h = 0)) + 
           facet_wrap(~ year_catch) +
           theme_bw()
           
           
#-- New mutate example - calculate standardized mean deviation

dat %>%
    filter(reading_no_num < 4 & year_catch > 1980) %>%
    group_by(Lokal, reading_no_num, year_catch) %>%
    mutate(mean_length = mean(length)) %>%
    mutate(length_deviation = length - mean_length) %>% # Length residuals, set mean as zero. 
    ggplot(., aes(length_deviation, fill = factor(reading_no_num)))+ # Plot the data
    geom_histogram() +
    facet_wrap(Lokal ~ reading_no_num, scales = "free_y", ncol=3)

# Length variation is larger in BT compared to in FM.

x11()
dat %>%
    filter(year_catch > 1980) %>%
    group_by(Lokal, reading_no_num, year_catch) %>%
    mutate(mean_length = mean(length)) %>%
    mutate(sd_length = sd(length)) %>% # Length residuals, set mean as zero. 
    ggplot(., aes(x=year_catch, y=mean_length, colour=Lokal))+ # Plot the data
    geom_point() +
    geom_pointrange(aes(ymin = mean_length-sd_length, ymax = mean_length+sd_length), alpha=0.4)+
    stat_smooth(method="auto", se=F)+
    facet_wrap(~reading_no_num, scales="free_y")
           
 
#-- We can also use pipes to efficiently summarize data. Here we look at the sample size of back-calculated length at age in the two areas

# Summarize example ####

dat %>% 
    group_by(year_catch, Lokal) %>% 
    summarize(freq = n()) %>%        # Get sample size within each Lokal and Year
    ggplot(., aes(year_catch, freq, fill = factor(Lokal))) + # Plot it
    geom_bar(stat="identity") + 
    ggtitle("samples")
    

#-- What about gear use?
dat %>% 
    group_by(year_catch, Lokal, Redskap) %>%  # added gear type
    summarize(freq = n()) %>%
    ggplot(., aes(year_catch, freq, fill = factor(Redskap))) + 
    facet_wrap(~Lokal) +
    geom_bar(stat="identity") + 
    ggtitle("samples")

# More gear used in FM compared to BT.. Good to know!



